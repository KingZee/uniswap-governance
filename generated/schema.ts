// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    return value.toString();
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get canceled(): boolean {
    let value = this.get("canceled");
    return value.toBoolean();
  }

  set canceled(value: boolean) {
    this.set("canceled", Value.fromBoolean(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get queued(): boolean {
    let value = this.get("queued");
    return value.toBoolean();
  }

  set queued(value: boolean) {
    this.set("queued", Value.fromBoolean(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get voteFor(): BigInt {
    let value = this.get("voteFor");
    return value.toBigInt();
  }

  set voteFor(value: BigInt) {
    this.set("voteFor", Value.fromBigInt(value));
  }

  get voteAgainst(): BigInt {
    let value = this.get("voteAgainst");
    return value.toBigInt();
  }

  set voteAgainst(value: BigInt) {
    this.set("voteAgainst", Value.fromBigInt(value));
  }

  get votes(): Array<string | null> {
    let value = this.get("votes");
    return value.toStringArray();
  }

  set votes(value: Array<string | null>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get executionETA(): BigInt | null {
    let value = this.get("executionETA");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executionETA(value: BigInt | null) {
    if (value === null) {
      this.unset("executionETA");
    } else {
      this.set("executionETA", Value.fromBigInt(value as BigInt));
    }
  }

  get targets(): Array<string> | null {
    let value = this.get("targets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set targets(value: Array<string> | null) {
    if (value === null) {
      this.unset("targets");
    } else {
      this.set("targets", Value.fromStringArray(value as Array<string>));
    }
  }

  get values(): Array<BigInt> | null {
    let value = this.get("values");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("values");
    } else {
      this.set("values", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get signatures(): Array<string> | null {
    let value = this.get("signatures");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signatures(value: Array<string> | null) {
    if (value === null) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromStringArray(value as Array<string>));
    }
  }

  get calldatas(): Array<Bytes> | null {
    let value = this.get("calldatas");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set calldatas(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("calldatas");
    } else {
      this.set("calldatas", Value.fromBytesArray(value as Array<Bytes>));
    }
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vote", id.toString(), this);
  }

  static load(id: string): Vote | null {
    return store.get("Vote", id) as Vote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get support(): boolean {
    let value = this.get("support");
    return value.toBoolean();
  }

  set support(value: boolean) {
    this.set("support", Value.fromBoolean(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get votingPower(): BigInt {
    let value = this.get("votingPower");
    return value.toBigInt();
  }

  set votingPower(value: BigInt) {
    this.set("votingPower", Value.fromBigInt(value));
  }

  get delegatedTo(): string {
    let value = this.get("delegatedTo");
    return value.toString();
  }

  set delegatedTo(value: string) {
    this.set("delegatedTo", Value.fromString(value));
  }

  get delegates(): Array<string | null> {
    let value = this.get("delegates");
    return value.toStringArray();
  }

  set delegates(value: Array<string | null>) {
    this.set("delegates", Value.fromStringArray(value));
  }

  get votes(): Array<string | null> {
    let value = this.get("votes");
    return value.toStringArray();
  }

  set votes(value: Array<string | null>) {
    this.set("votes", Value.fromStringArray(value));
  }
}
